install.packages("shiny")
install.packages("SnowballC")
install.packages("splines")
install.packages("survival")
library("shiny", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
source('~/Desktop/JockersTextAnalysis.R/Rscripts/chap03-Main.R')
list.files()
devtools::installinstall_github('XsedeScienceGateways/TAG')
install.packages("devtools")
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
devtools::install_github('XsedeScienceGateways/TAG')
updateR()
devtools::install_github('XsedeScienceGateways/TAG')
install_github("cpsievert/LDAvis")
install_github("wrathematics/ngram")
install_github("XSEDEScienceGateways/textgateway")
install.packages("dplyr")
install_github("XSEDEScienceGateways/textgateway")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
# to data.frame
tweets.df <- do.call("rbind", lapply(tweets, as.data.frame))
# to text corpus
tweets.corpus <- Corpus(VectorSource(tweets.df$text))
# transformations ####
# lower case
tweets.corpus <- tm_map(tweets.corpus, tolower)
# remove punctuation
tweets.corpus <- tm_map(tweets.corpus, removePunctuation)
# remove numbers
tweets.corpus <- tm_map(tweets.corpus, removeNumbers)
# remove URLs
removeURLs <- function(x) gsub("http[[:alnum:]]*", "", x)
tweets.corpus <- tm_map(tweets.corpus, removeURLs)
# add two stop words, 'available' and 'via'
myStopWords <- c(stopwords('english'), "available", "via")
# remove 'tweetsomy' and 'apps' from stopwords
myStopWords <- setdiff(myStopWords, c("tweetsomy", "apps"))
# remove stopwords from corpus
tweets.corpus <- tm_map(tweets.corpus, removeWords, myStopWords)
save("tweets.corpus", file="tweets.corpus.RData")
# view effect
writeLines(strwrap(tweets.corpus[[4]], width=73))
# stemming ####
library(SnowballC)
# copy
tweets.corpus.copy <- tweets.corpus
# stem
tweets.corpus <- tm_map(tweets.corpus, stemDocument)
inspect(tweets.corpus[4])
# stem completition
tweets.corpus <- tm_map(tweets.corpus, stemCompletion,
dictionary=tweets.corpus.copy)
save(tweets.corpus, file="tweets.corpus.SC.RData")
# to TD matrix ####
library(tm)
# tdm
tweets.tdm <- TermDocumentMatrix(tweets.corpus, control=list(wordLengths=c(1, Inf)))
# print terms
dimnames(tweets.tdm)$Terms
save(tweets.tdm, file="tweets.tdm.RData")
# frequent terms
which(apply(tweets.tdm, 1, sum) > 20)
findFreqTerms(tweets.tdm, lowfreq=20)
findAssocs(tweets.tdm, "mandela", 0.25)
findAssocs(tweets.tdm, "recent", 0.25)
# word cloud ####
library(wordcloud)
tweets.matrix <- as.matrix(tweets.tdm)
wordFreq.sort <- sort(rowSums(tweets.matrix), decreasing=T)
save(tweets.matrix, file="tweets.matrix.RData")
# wcloud
set.seed(1234)
grayLevels <- gray( (wordFreq.sort + 10) / (max(wordFreq.sort) + 10))
word.cloud <- wordcloud(words=names(wordFreq.sort), freq=wordFreq.sort,
min.freq=3, random.order=F, colors=grayLevels)
# tweetsomist, weeks, america, new, year, china, mandela, december
#\-------------hclust-----------\####
# hierarchial clustering of terms ####
setwd("~/Documents/R/mining/twitter")
load("tweets.tdm.RData")
# remove sparse terms ####
tweets.tdm2 <- removeSparseTerms(tweets.tdm, sparse=0.95)
tweets.matrix2 <- as.matrix(tweets.tdm2)
# hclust ####
distMatrix <- dist(scale(tweets.matrix2))
tweets.fit <- hclust(distMatrix, method="ward")
# plot dendrogram ####
plot(tweets.fit, cex=0.9, hang=-1,
main="Word Cluster Dendrogram")
# cut tree
rect.hclust(tweets.fit, k=5)
(tweets.groups <- cutree(tweets.fit, k=5))
# conversion ####
library(tm)
# to data.frame
tweets.df <- do.call("rbind", lapply(tweets, as.data.frame))
# to text corpus
tweets.corpus <- Corpus(VectorSource(tweets.df$text))
# transformations ####
# lower case
tweets.corpus <- tm_map(tweets.corpus, tolower, mc.cores=1)
# remove punctuation
tweets.corpus <- tm_map(tweets.corpus, removePunctuation)
# remove numbers
tweets.corpus <- tm_map(tweets.corpus, removeNumbers)
# remove URLs
removeURLs <- function(x) gsub("http[[:alnum:]]*", "", x)
tweets.corpus <- tm_map(tweets.corpus, removeURLs)
# add two stop words, 'available' and 'via'
myStopWords <- c(stopwords('english'), "available", "via")
# remove 'tweetsomy' and 'apps' from stopwords
myStopWords <- setdiff(myStopWords, c("tweetsomy", "apps"))
# remove stopwords from corpus
tweets.corpus <- tm_map(tweets.corpus, removeWords, myStopWords)
save("tweets.corpus", file="tweets.corpus.RData")
# view effect
writeLines(strwrap(tweets.corpus[[4]], width=73))
# stemming ####
library(SnowballC)
# copy
tweets.corpus.copy <- tweets.corpus
# stem
tweets.corpus <- tm_map(tweets.corpus, stemDocument)
inspect(tweets.corpus[4])
# stem completition
tweets.corpus <- tm_map(tweets.corpus, stemCompletion,
dictionary=tweets.corpus.copy)
save(tweets.corpus, file="tweets.corpus.SC.RData")
# to TD matrix ####
library(tm)
# tdm
tweets.tdm <- TermDocumentMatrix(tweets.corpus, control=list(wordLengths=c(1, Inf)))
# print terms
dimnames(tweets.tdm)$Terms
save(tweets.tdm, file="tweets.tdm.RData")
# frequent terms
which(apply(tweets.tdm, 1, sum) > 20)
findFreqTerms(tweets.tdm, lowfreq=20)
findAssocs(tweets.tdm, "mandela", 0.25)
findAssocs(tweets.tdm, "recent", 0.25)
# word cloud ####
library(wordcloud)
tweets.matrix <- as.matrix(tweets.tdm)
wordFreq.sort <- sort(rowSums(tweets.matrix), decreasing=T)
save(tweets.matrix, file="tweets.matrix.RData")
# wcloud
set.seed(1234)
grayLevels <- gray( (wordFreq.sort + 10) / (max(wordFreq.sort) + 10))
word.cloud <- wordcloud(words=names(wordFreq.sort), freq=wordFreq.sort,
min.freq=3, random.order=F, colors=grayLevels)
# tweetsomist, weeks, america, new, year, china, mandela, december
#\-------------hclust-----------\####
# hierarchial clustering of terms ####
setwd("~/Documents/R/mining/twitter")
load("tweets.tdm.RData")
# remove sparse terms ####
tweets.tdm2 <- removeSparseTerms(tweets.tdm, sparse=0.95)
tweets.matrix2 <- as.matrix(tweets.tdm2)
# hclust ####
distMatrix <- dist(scale(tweets.matrix2))
tweets.fit <- hclust(distMatrix, method="ward")
# plot dendrogram ####
plot(tweets.fit, cex=0.9, hang=-1,
main="Word Cluster Dendrogram")
# cut tree
rect.hclust(tweets.fit, k=5)
(tweets.groups <- cutree(tweets.fit, k=5))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Desktop/R/Text_Analysis/RScripts/sentTrumpDensity.R', echo=TRUE)
ggplot(melt(df.result), aes(value, fill=variable)) + geom_histogram(position = "dodge")
source('~/Desktop/R/Text_Analysis/RScripts/sentTrumpDensity.R', echo=TRUE)
ggplot(melt(df.result), aes(value, fill=variable)) + geom_histogram(binwidth=.3, position = "dodge") + scale_x_continuous(breaks=-7:7)
ggplot(melt(df.result), aes(value, fill=variable)) + geom_histogram(binwidth=.5, position = "dodge") + scale_x_continuous(breaks=-6:6)
ggplot(melt(df.result), aes(value, fill=variable)) + geom_histogram(binwidth=.5, position = "dodge") + scale_x_continuous(breaks=-6:6) + xlim(-6,6)
source('~/.active-rstudio-document', echo=TRUE)
ggplot(melt(df.result), aes(value, fill=variable)) + geom_histogram(binwidth=.5, position = "dodge")
+ scale_x_continuous(breaks=-6:6) + xlim(-6,6)
+ xlab("Sentiment Score") + ylab("Number of Tweets")
+ ggtitle("Sentiment Scoring of Tweets Mentioning @RealDonaldTrump and @HillaryClinton")
ggplot(melt(df.result), aes(value, fill=variable)) + geom_histogram(binwidth=.5, position = "dodge")
+ scale_x_continuous(breaks=-6:6) + xlim(-6,6)
ggplot(melt(df.result), aes(value, fill=variable)) + geom_histogram(binwidth=.5, position = "dodge")
ggplot(melt(df.result), aes(value, fill=variable))
+ geom_histogram(binwidth=.5, position = "dodge")
+ scale_x_continuous(1)
ggplot(melt(df.result), aes(value, fill=variable))
+ geom_histogram(binwidth=.5, position = "dodge")
+ scale_x_continuous(-6:6)
ggplot(melt(df.result), aes(value, fill=variable))
+ geom_histogram(binwidth=.5, position = "dodge")
+ scale_x_continuous(breaks=-6:6)
ggplot(melt(df.result), aes(value, fill=variable))
+ geom_histogram(binwidth=.5, position = "dodge")
+ scale_x_continuous(breaks=-6:6)
ggplot(melt(df.result), aes(value, fill=variable))
+ geom_histogram(binwidth=.5, position = "dodge")
source('~/.active-rstudio-document', echo=TRUE)
ggplot(melt(df.result), aes(value, fill=variable))
+ geom_histogram(position = "dodge")
source('~/Desktop/R/Text_Analysis/RScripts/sentTrumpDensity.R', echo=TRUE)
ggplot(melt(df.result), aes(value, fill=variable)) + geom_histogram(position = "dodge", binwidth = .5)
ggplot(melt(df.result), aes(value, fill=variable)) + geom_histogram(position = "dodge", binwidth = 1)
+ xlab("Sentiment Score") + ylab("Number of Tweets")
+ ggtitle("Sentiment Scoring of Tweets Mentioning @RealDonaldTrump and @HillaryClinton")
ggplot(melt(df.result), aes(value, fill=variable))
+ geom_histogram(position = "dodge")
source('~/.active-rstudio-document', echo=TRUE)
df.reslut(head)
df.result
head(df.result)
scores.df
df.result <- data.frame(x = trump.result, y = hillary.result)
ggplot(melt(df.result), aes(value, fill=variable)) + geom_histogram(position = "dodge", binwidth = 1)
+ xlab("Sentiment Score") + ylab("Number of Tweets")
+ ggtitle("Sentiment Scoring of Tweets Mentioning @RealDonaldTrump and @HillaryClinton")
ggplot(melt(trump.result), aes(value, fill=variable)) + geom_histogram(position = "dodge", binwidth = 1)
+ xlab("Sentiment Score") + ylab("Number of Tweets")
+ ggtitle("Sentiment Scoring of Tweets Mentioning @RealDonaldTrump and @HillaryClinton")
df.result <- data.frame(x = trump.result, y = hillary.result)
ggplot(melt(trump.result), aes(value, fill=variable)) + geom_histogram(position = "dodge", binwidth = .7)
+ xlab("Sentiment Score") + ylab("Number of Tweets")
+ ggtitle("Sentiment Scoring of Tweets Mentioning @RealDonaldTrump and @HillaryClinton")
df.result <- data.frame(x = trump.result, y = hillary.result)
ggplot(melt(trump.result), aes(value, fill=variable)) + geom_histogram(position = "dodge", binwidth = .5)
+ xlab("Sentiment Score") + ylab("Number of Tweets")
+ ggtitle("Sentiment Scoring of Tweets Mentioning @RealDonaldTrump and @HillaryClinton")
df.result <- data.frame(x = trump.result, y = hillary.result)
p <- ggplot(melt(trump.result), aes(value, fill=variable)) + geom_histogram(position = "dodge", binwidth = .5)
p + xlab("Sentiment Score") + ylab("Number of Tweets")
+ ggtitle("Sentiment Scoring of Tweets Mentioning @RealDonaldTrump and @HillaryClinton")
df.result <- data.frame(x = trump.result, y = hillary.result)
p <- ggplot(melt(trump.result), aes(value, fill=variable)) + geom_histogram(position = "dodge", binwidth = .5)
p + xlab("Sentiment Score") + ylab("Number of Tweets") + ggtitle("Sentiment Scoring of Tweets Mentioning @RealDonaldTrump and @HillaryClinton")
df.result <- data.frame(x = trump.result, y = hillary.result)
p <- ggplot(melt(trump.result), aes(value, fill="red")) + geom_histogram(position = "dodge", binwidth = .5)
p + xlab("Sentiment Score") + ylab("Number of Tweets") + ggtitle("Sentiment Scoring of Tweets Mentioning @RealDonaldTrump and @HillaryClinton")
df.result <- data.frame(x = trump.result, y = hillary.result)
p <- ggplot(melt(trump.result), aes(value, trump="red")) + geom_histogram(position = "dodge", binwidth = .5)
p + xlab("Sentiment Score") + ylab("Number of Tweets") + ggtitle("Sentiment Scoring of Tweets Mentioning @RealDonaldTrump and @HillaryClinton")
df.result <- data.frame(x = trump.result, y = hillary.result)
p <- ggplot(melt(trump.result), aes(value, fill="variable")) + geom_histogram(position = "dodge", binwidth = .5)
p + xlab("Sentiment Score") + ylab("Number of Tweets") + ggtitle("Sentiment Scoring of Tweets Mentioning @RealDonaldTrump and @HillaryClinton")
ggplot(melt(df.result), aes(value, fill=variable)) + geom_histogram(position = "dodge", binwidth = 1) + xlab("Sentiment Score") + ylab("Number of Tweets") + ggtitle("Sentiment Scoring of Tweets Mentioning @RealDonaldTrump and @HillaryClinton")
ggplot(melt(df.result), aes(value, fill=variable)) + geom_histogram(position = "dodge", binwidth = .3) + xlab("Sentiment Score") + ylab("Number of Tweets") + ggtitle("Sentiment Scoring of Tweets Mentioning @RealDonaldTrump and @HillaryClinton")
ggplot(melt(df.result), aes(value, fill=variable)) + geom_histogram(position = "dodge", binwidth = .5) + xlab("Sentiment Score") + ylab("Number of Tweets") + ggtitle("Sentiment Scoring of Tweets Mentioning @RealDonaldTrump and @HillaryClinton")
ggplot(melt(df.result), aes(value, fill=variable)) + geom_histogram(position = "dodge", binwidth = .5) + xlab("Sentiment Score") + ylab("Number of Tweets") + ggtitle("Sentiment Scoring of Tweets Mentioning @RealDonaldTrump and @HillaryClinton") + xlim(c(-7,7))
ggplot(melt(df.result), aes(value, fill=variable)) + geom_histogram(position = "dodge", binwidth = .5, fill = "red") + xlab("Sentiment Score") + ylab("Number of Tweets") + ggtitle("Sentiment Scoring of Tweets Mentioning @RealDonaldTrump and @HillaryClinton") + xlim(c(-7,7))
p <- ggplot(melt(trump.result), aes(value, fill="variable")) + geom_histogram(position = "dodge", binwidth = .5, fill="red")
p + xlab("Sentiment Score") + ylab("Number of Tweets") + ggtitle("Sentiment Scoring of Tweets Mentioning @RealDonaldTrump and @HillaryClinton")
p <- ggplot(melt(trump.result), aes(value, fill="variable")) + geom_histogram(position = "dodge", binwidth = .5, fill="red")
p + xlab("Sentiment Score") + ylab("Number of Tweets") + ggtitle("Sentiment Scoring of Tweets Mentioning @RealDonaldTrump)
p <- ggplot(melt(trump.result), aes(value, fill="variable")) + geom_histogram(position = "dodge", binwidth = .5, fill="red")
p + xlab("Sentiment Score") + ylab("Number of Tweets") + ggtitle("Sentiment Scoring of Tweets Mentioning @RealDonaldTrump)
ggplot(melt(trump.result), aes(value, fill="variable")) + geom_histogram(position = "dodge", binwidth = .5, fill="red") + xlab("Sentiment Score") + ylab("Number of Tweets") + ggtitle("Sentiment Scoring of Tweets Mentioning @RealDonaldTrump) + xlim(c(-7,7))
ggplot(melt(trump.result), aes(value, fill="variable")) + geom_histogram(position = "dodge", binwidth = .5, fill="red") + xlab("Sentiment Score") + ylab("Number of Tweets") + ggtitle("Sentiment Scoring of Tweets Mentioning @RealDonaldTrump) + xlim(c(-7,7))
ggplot(melt(trump.result), aes(value, fill="variable"))
+ geom_histogram(position = "dodge", binwidth = .5, fill="red")
+ xlab("Sentiment Score") + ylab("Number of Tweets") +
ggtitle("Sentiment Scoring of Tweets Mentioning @RealDonaldTrump") + xlim(c(-7,7))
ggplot(melt(df.result), aes(value, fill=variable)) + geom_histogram(position = "dodge", binwidth = .5) + xlab("Sentiment Score") + ylab("Number of Tweets") + ggtitle("Sentiment Scoring of Tweets Mentioning @RealDonaldTrump and @HillaryClinton") + xlim(c(-7,7))
ggplot(melt(trump.result), aes(value, fill="variable")) + geom_histogram(position = "dodge", binwidth = .5, fill="red") + xlab("Sentiment Score") + ylab("Number of Tweets") + ggtitle("Sentiment Scoring of Tweets Mentioning @RealDonaldTrump") + xlim(c(-7,7))
ggplot(melt(df.result), aes(value, fill=variable)) + geom_histogram(position = "dodge", binwidth = 1) + xlab("Sentiment Score") + ylab("Number of Tweets") + ggtitle("Sentiment Scoring of Tweets Mentioning @RealDonaldTrump and @HillaryClinton") + xlim(c(-7,7))
ggplot(melt(df.result), aes(value, fill=variable)) + geom_histogram(position = "dodge", binwidth = 2) + xlab("Sentiment Score") + ylab("Number of Tweets") + ggtitle("Sentiment Scoring of Tweets Mentioning @RealDonaldTrump and @HillaryClinton") + xlim(c(-7,7))
ggplot(melt(df.result), aes(value, fill=variable)) + geom_histogram(position = "dodge", binwidth = .5) + xlab("Sentiment Score") + ylab("Number of Tweets") + ggtitle("Sentiment Scoring of Tweets Mentioning @RealDonaldTrump and @HillaryClinton") + xlim(c(-7,7))
ggplot(melt(trump.result), aes(value, fill="variable")) + geom_histogram(position = "dodge", binwidth = 1, fill="red") + xlab("Sentiment Score") + ylab("Number of Tweets") + ggtitle("Sentiment Scoring of Tweets Mentioning @RealDonaldTrump") + xlim(c(-7,7))
ggplot(melt(trump.result), aes(value, fill="variable")) + geom_histogram(position = "dodge", binwidth = .8, fill="red") + xlab("Sentiment Score") + ylab("Number of Tweets") + ggtitle("Sentiment Scoring of Tweets Mentioning @RealDonaldTrump") + xlim(c(-7,7))
ggplot(melt(trump.result), aes(value, fill="variable")) + geom_histogram(position = "dodge", binwidth = .5, fill="red") + xlab("Sentiment Score") + ylab("Number of Tweets") + ggtitle("Sentiment Scoring of Tweets Mentioning @RealDonaldTrump") + xlim(c(-7,7))
source('~/.active-rstudio-document', echo=TRUE)
library(shiny)
source('~/Desktop/R/Text_Analysis/shiny/TwitterSent/app.R', echo=TRUE)
ggplot(melt(df.result), aes(value, fill=variable)) +
geom_histogram(position = "dodge", binwidth = .5) + xlab("Sentiment Score") +
ylab("Number of Tweets") + ggtitle("Sentiment Scoring of Tweets Mentioning @RealDonaldTrump and @HillaryClinton") +
xlim(c(-7,7)) + scale_x_continuous(breaks=number_ticks(14))
ggplot(melt(df.result), aes(value, fill=variable)) +
geom_histogram(position = "dodge", binwidth = .5) + xlab("Sentiment Score") +
ylab("Number of Tweets") + ggtitle("Sentiment Scoring of Tweets Mentioning @RealDonaldTrump and @HillaryClinton") +
xlim(c(-7,7)) + scale_x_continuous(breaks=pretty_breaks(n=14))
ggplot(melt(df.result), aes(value, fill=variable)) +
geom_histogram(position = "dodge", binwidth = .5) + xlab("Sentiment Score") +
ylab("Number of Tweets") + ggtitle("Sentiment Scoring of Tweets Mentioning @RealDonaldTrump and @HillaryClinton") +
xlim(c(-7,7)) + scale_x_continuous(breaks=pretty(dat$x, n=14))
ggplot(melt(df.result), aes(value, fill=variable)) +
geom_histogram(position = "dodge", binwidth = .5) + xlab("Sentiment Score") +
ylab("Number of Tweets") + ggtitle("Sentiment Scoring of Tweets Mentioning @RealDonaldTrump and @HillaryClinton") +
xlim(c(-7,7)) + scale_x_continuous(breaks=pretty(df.result$x.score, n=14))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
trump.result
head(trump.result)
source('~/Desktop/R/Text_Analysis/RScripts/sentTrumpDensity.R', echo=TRUE)
head(trump.result)
df.result <- data.frame(x = trump.result, y = hillary.result)
ggplot(melt(df.result), aes(value, fill=variable)) +
geom_histogram(position = "dodge", binwidth = .5) + xlab("Sentiment Score") +
ylab("Number of Tweets") + ggtitle("Sentiment Scoring of Tweets Mentioning @RealDonaldTrump and @HillaryClinton") +
xlim(c(-7,7)) + scale_x_continuous(breaks=pretty(df.result$x.score, n=14))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
#figure out the score for each tweet specifically
scores = apply(tweets, 1, function(tweet, pos.words, neg.words) {
#normalize tweet text
tweet = gsub('[[:punct:]]', '', tweet)
tweet = gsub('[[:cntrl:]]', '', tweet)
tweet = gsub('\\d+', '', tweet)
#REMOVE EMOJIS!
tweet = iconv(tweet, "ASCII", "UTF-8", sub="")
tweet.lower = tolower(tweet)
#split list into separate words
word.list = str_split(tweet.lower, '\\s+')
words = unlist(word.list)
#compare our words to the dictionaries of positive and negative terms using match function
pos.matches = match(words, pos.words)
neg.matches = match(words, neg.words)
#match returns a position of the matched term or NA, but we just want the TRUE/FALSE, not NA
pos.matches = !is.na(pos.matches)
neg.matches = !is.na(neg.matches)
#the score of each tweet is the sum of the positive matches minus the sum of the negative matches
score = sum(pos.matches) - sum(neg.matches)
return(score)
}, pos.words, neg.words, .progress = .progress)
#compile the scores and text of tweets into a data frame for plotting
scores.df = data.frame(score=scores, text = tweets)
return(scores.df)
}
trump.result = score.sentiment(trump.text, pos.words, neg.words)
hillary.result = score.sentiment(hillary.text, pos.words, neg.words)
df.result <- data.frame(x = trump.result, y = hillary.result)
ggplot(melt(df.result), aes(value, fill=variable)) +
geom_histogram(position = "dodge", binwidth = .5) + xlab("Sentiment Score") +
ylab("Number of Tweets") + ggtitle("Sentiment Scoring of Tweets Mentioning @RealDonaldTrump and @HillaryClinton") +
xlim(c(-7,7)) + scale_x_continuous(breaks=pretty(df.result$x.score, n=14))
#Acknowledgements: This algorithm was adapted from Jeffrey Breen's Mining Twitter for Airline Consumer Sentiment article. You can find it here: http://www.inside-r.org/howto/mining-twitter-airline-consumer-sentiment.
#Reference: Liu, Minqing Hu and Junsheng Cheng. "Opinion Observer: Analyzing and Comparing Opinions on the Web." Proceedings of the 14th International World Wide Web conference (WWW-2005), May 10-14, 2005, Chiba, Japan.
# Implement the sentiment scoring algorithm
score.sentiment = function(tweets, pos.words, neg.words, .progress='none')
{
#figure out the score for each tweet specifically
scores = apply(tweets, 2, function(tweet, pos.words, neg.words) {
#normalize tweet text
tweet = gsub('[[:punct:]]', '', tweet)
tweet = gsub('[[:cntrl:]]', '', tweet)
tweet = gsub('\\d+', '', tweet)
#REMOVE EMOJIS!
tweet = iconv(tweet, "ASCII", "UTF-8", sub="")
tweet.lower = tolower(tweet)
#split list into separate words
word.list = str_split(tweet.lower, '\\s+')
words = unlist(word.list)
#compare our words to the dictionaries of positive and negative terms using match function
pos.matches = match(words, pos.words)
neg.matches = match(words, neg.words)
#match returns a position of the matched term or NA, but we just want the TRUE/FALSE, not NA
pos.matches = !is.na(pos.matches)
neg.matches = !is.na(neg.matches)
#the score of each tweet is the sum of the positive matches minus the sum of the negative matches
score = sum(pos.matches) - sum(neg.matches)
return(score)
}, pos.words, neg.words, .progress = .progress)
#compile the scores and text of tweets into a data frame for plotting
scores.df = data.frame(score=scores, text = tweets)
return(scores.df)
}
trump.result = score.sentiment(trump.text, pos.words, neg.words)
hillary.result = score.sentiment(hillary.text, pos.words, neg.words)
df.result <- data.frame(x = trump.result, y = hillary.result)
ggplot(melt(df.result), aes(value, fill=variable)) +
geom_histogram(position = "dodge", binwidth = .5) + xlab("Sentiment Score") +
ylab("Number of Tweets") + ggtitle("Sentiment Scoring of Tweets Mentioning @RealDonaldTrump and @HillaryClinton") +
xlim(c(-7,7)) + scale_x_continuous(breaks=pretty(df.result$x.score, n=14))
#Acknowledgements: This algorithm was adapted from Jeffrey Breen's Mining Twitter for Airline Consumer Sentiment article. You can find it here: http://www.inside-r.org/howto/mining-twitter-airline-consumer-sentiment.
#Reference: Liu, Minqing Hu and Junsheng Cheng. "Opinion Observer: Analyzing and Comparing Opinions on the Web." Proceedings of the 14th International World Wide Web conference (WWW-2005), May 10-14, 2005, Chiba, Japan.
# Implement the sentiment scoring algorithm
score.sentiment = function(tweets, pos.words, neg.words, .progress='none')
{
#figure out the score for each tweet specifically
scores = sapply(tweets, 2, function(tweet, pos.words, neg.words) {
#normalize tweet text
tweet = gsub('[[:punct:]]', '', tweet)
tweet = gsub('[[:cntrl:]]', '', tweet)
tweet = gsub('\\d+', '', tweet)
#REMOVE EMOJIS!
tweet = iconv(tweet, "ASCII", "UTF-8", sub="")
tweet.lower = tolower(tweet)
#split list into separate words
word.list = str_split(tweet.lower, '\\s+')
words = unlist(word.list)
#compare our words to the dictionaries of positive and negative terms using match function
pos.matches = match(words, pos.words)
neg.matches = match(words, neg.words)
#match returns a position of the matched term or NA, but we just want the TRUE/FALSE, not NA
pos.matches = !is.na(pos.matches)
neg.matches = !is.na(neg.matches)
#the score of each tweet is the sum of the positive matches minus the sum of the negative matches
score = sum(pos.matches) - sum(neg.matches)
return(score)
}, pos.words, neg.words, .progress = .progress)
#compile the scores and text of tweets into a data frame for plotting
scores.df = data.frame(score=scores, text = tweets)
return(scores.df)
}
trump.result = score.sentiment(trump.text, pos.words, neg.words)
hillary.result = score.sentiment(hillary.text, pos.words, neg.words)
df.result <- data.frame(x = trump.result, y = hillary.result)
ggplot(melt(df.result), aes(value, fill=variable)) +
geom_histogram(position = "dodge", binwidth = .5) + xlab("Sentiment Score") +
ylab("Number of Tweets") + ggtitle("Sentiment Scoring of Tweets Mentioning @RealDonaldTrump and @HillaryClinton") +
xlim(c(-7,7)) + scale_x_continuous(breaks=pretty(df.result$x.score, n=14))
#Acknowledgements: This algorithm was adapted from Jeffrey Breen's Mining Twitter for Airline Consumer Sentiment article. You can find it here: http://www.inside-r.org/howto/mining-twitter-airline-consumer-sentiment.
#Reference: Liu, Minqing Hu and Junsheng Cheng. "Opinion Observer: Analyzing and Comparing Opinions on the Web." Proceedings of the 14th International World Wide Web conference (WWW-2005), May 10-14, 2005, Chiba, Japan.
# Implement the sentiment scoring algorithm
score.sentiment = function(tweets, pos.words, neg.words, .progress='none')
{
#figure out the score for each tweet specifically
scores = sapply(tweets, 2, function(tweet, pos.words, neg.words) {
#normalize tweet text
tweet = gsub('[[:punct:]]', '', tweet)
tweet = gsub('[[:cntrl:]]', '', tweet)
tweet = gsub('\\d+', '', tweet)
#REMOVE EMOJIS!
tweet = iconv(tweet, "ASCII", "UTF-8", sub="")
tweet.lower = tolower(tweet)
#split list into separate words
word.list = str_split(tweet.lower, '\\s+')
words = unlist(word.list)
#compare our words to the dictionaries of positive and negative terms using match function
pos.matches = match(words, pos.words)
neg.matches = match(words, neg.words)
#match returns a position of the matched term or NA, but we just want the TRUE/FALSE, not NA
pos.matches = !is.na(pos.matches)
neg.matches = !is.na(neg.matches)
#the score of each tweet is the sum of the positive matches minus the sum of the negative matches
score = sum(pos.matches) - sum(neg.matches)
return(score)
}, pos.words, neg.words, .progress = .progress)
#compile the scores and text of tweets into a data frame for plotting
scores.df = data.frame(score=scores, text = tweets)
return(scores.df)
}
trump.result = score.sentiment(trump.text, pos.words, neg.words)
hillary.result = score.sentiment(hillary.text, pos.words, neg.words)
df.result <- data.frame(x = trump.result, y = hillary.result)
ggplot(melt(df.result), aes(value, fill=variable)) +
geom_histogram(position = "dodge", binwidth = .5) + xlab("Sentiment Score") +
ylab("Number of Tweets") + ggtitle("Sentiment Scoring of Tweets Mentioning @RealDonaldTrump and @HillaryClinton") +
xlim(c(-7,7)) + scale_x_continuous(breaks=pretty(df.result$x.score, n=14))
#Acknowledgements: This algorithm was adapted from Jeffrey Breen's Mining Twitter for Airline Consumer Sentiment article. You can find it here: http://www.inside-r.org/howto/mining-twitter-airline-consumer-sentiment.
#Reference: Liu, Minqing Hu and Junsheng Cheng. "Opinion Observer: Analyzing and Comparing Opinions on the Web." Proceedings of the 14th International World Wide Web conference (WWW-2005), May 10-14, 2005, Chiba, Japan.
source('~/.active-rstudio-document', echo=TRUE)
install.packages("doMC")
library("doMC", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
ggplot(melt(df.result), aes(value, fill=variable)) +
geom_histogram(position = "dodge", binwidth = .5) + xlab("Sentiment Score") +
ylab("Number of Tweets") + ggtitle("Sentiment Scoring of Tweets Mentioning @RealDonaldTrump and @HillaryClinton") +
xlim(c(-7,7)) + scale_x_continuous(breaks=pretty(df.result$x.score, n=14)) + scale_color_manual(values = c("red","blue"))
ggplot(melt(df.result), aes(value, fill="red")) + geom_histogram(position = "dodge")
+ xlab("Sentiment Score") + ylab("Number of Tweets")
+ ggtitle("Sentiment Scoring of Tweets Mentioning @RealDonaldTrump")
ggplot(melt(df.result), aes(value)) + geom_histogram(position = "dodge", fill="red")
+ xlab("Sentiment Score") + ylab("Number of Tweets")
+ ggtitle("Sentiment Scoring of Tweets Mentioning @RealDonaldTrump")
ggplot(melt(df.result), aes(value)) +
geom_histogram(position = "dodge", binwidth = .5, fill=c("red", "blue") ) + xlab("Sentiment Score") +
ylab("Number of Tweets") + ggtitle("Sentiment Scoring of Tweets Mentioning @RealDonaldTrump and @HillaryClinton") +
xlim(c(-7,7)) + scale_x_continuous(breaks=pretty(df.result$x.score, n=14)) + scale_color_manual(values = c("red","blue"))
ggplot(melt(df.result), aes(value, fill=variable)) +
geom_histogram(position = "dodge", binwidth = .5 ) + xlab("Sentiment Score") +
ylab("Number of Tweets") + ggtitle("Sentiment Scoring of Tweets Mentioning @RealDonaldTrump and @HillaryClinton") +
xlim(c(-7,7)) + scale_x_continuous(breaks=pretty(df.result$x.score, n=14))
ggplot(melt(df.result), aes(value, fill=variable)) +
geom_histogram(position = "dodge", binwidth = .5 ) + xlab("Sentiment Score") +
ylab("Number of Tweets") + ggtitle("Sentiment Scoring of Tweets Mentioning @RealDonaldTrump and @HillaryClinton") +
xlim(c(-7,7)) + scale_x_continuous(breaks=pretty(df.result$x.score, n=14)) +scale_fill_manual(legend_title, values=c("red","blue"))
